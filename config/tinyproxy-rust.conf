##
## tinyproxy-rust.conf -- tinyproxy-rust daemon configuration file
##
## This is the configuration file for tinyproxy-rust, a fast lightweight
## HTTP/HTTPS proxy daemon implemented in Rust.
##

#
# User/Group: This allows you to set the user and group that will be
# used for tinyproxy-rust after the initial binding to the port has been done
# as the root user. Either the user or group name or the UID or GID
# number may be used.
#
User nobody
Group nobody

#
# Port: Specify the port which tinyproxy-rust will listen on. Please note
# that should you choose to run on a port lower than 1024 you will need
# to start tinyproxy-rust using root.
#
Port 8888

#
# Listen: If you have multiple interfaces this allows you to bind to
# only one. If this is commented out, tinyproxy-rust will bind to all
# interfaces present.
#
#Listen 192.168.0.1

#
# Bind: This allows you to specify which interface will be used for
# outgoing connections. This is useful for multi-home'd machines where
# you want all traffic to appear outgoing from one particular interface.
#
#Bind 192.168.0.1

#
# BindSame: If enabled, tinyproxy-rust will bind the outgoing connection to the
# ip address of the incoming connection.
#
#BindSame yes

#
# Timeout: The maximum number of seconds of inactivity a connection is
# allowed to have before it is closed by tinyproxy-rust.
#
Timeout 600

#
# MaxClients: This is the absolute highest number of threads which will
# be created. In other words, only MaxClients number of clients can be
# connected at the same time.
#
MaxClients 100

#
# MaxRequestsPerChild: The number of connections a thread will handle
# before it is killed. In practise this should be set to 0, which disables
# thread reaping. If you do notice problems with memory leakage, then set
# this to something like 10000.
#
MaxRequestsPerChild 0

#
# LogFile: Allows you to specify the location where information should
# be logged to. If you would prefer to log to syslog, then disable this
# and enable the Syslog directive. These directives are mutually exclusive.
#
LogFile "/var/log/tinyproxy-rust/tinyproxy.log"

#
# Syslog: Tell tinyproxy-rust to use syslog instead of a logfile. This option
# must not be enabled if the Logfile directive is being used. These two
# directives are mutually exclusive.
#
#Syslog On

#
# LogLevel: Set the logging level. Allowed settings are:
# Critical (least verbose), Error, Warning, Notice, Connect (to log
# connects without Info's noise), Info (moderate verbose) and Debug
# (most verbose). The LogLevel logs from the set level and above.
#
LogLevel Info

#
# PidFile: Write the PID of the main tinyproxy-rust thread to this file so it
# can be used for signalling purposes.
# If not specified, no pidfile will be written.
#
PidFile "/var/run/tinyproxy-rust.pid"

#
# Allow/Deny: Customizable access control. The order is important.
# All the lines are processed in the order they are specified.
# If you want to allow all access except from specific IPs/networks,
# use Allow first, then Deny. 
#
# Examples:
# Allow 192.168.0.0/16
# Allow 10.0.0.0/8
# Deny 192.168.1.100
# Allow all

#
# BasicAuth: HTTP "Basic" proxy authentication.
# Format: BasicAuth username:password
#
#BasicAuth user:pass

#
# ViaProxyName: The "Via" header is required by the HTTP RFC, but using
# the real name is a security concern. If the following directive is
# enabled, the string supplied will be used as the host portion of the
# Via header; otherwise, the server's host name will be used.
#
ViaProxyName "tinyproxy-rust"

#
# DisableViaHeader: When this is set to yes, tinyproxy-rust does NOT add
# the Via header to the requests. This virtually puts tinyproxy-rust into
# stealth mode. Note that RFC 2616 requires proxies to set the Via header,
# so by enabling this option, you break compliance.
# Don't disable the Via header unless you know what you are doing...
#
#DisableViaHeader Yes

#
# Filter: This allows you to specify the location of the filter file.
# The filter file contains one host/domain per line, and is used to
# deny access to specified hosts/domains.
#
#Filter "/etc/tinyproxy-rust/filter"

#
# FilterURLs: If this boolean is set to Yes, filtering is performed
# for URLs rather than for domains. This allows you to block specific
# URLs rather than entire domains.
#
#FilterURLs No

#
# FilterExtended: Use POSIX Extended regular expressions rather than
# basic. This option has no effect if FilterURLs is disabled.
#
#FilterExtended No

#
# FilterCaseSensitive: Use case sensitive regular expressions.
# This option has no effect if FilterURLs is disabled.
#
#FilterCaseSensitive No

#
# Anonymous: If an Anonymous keyword is present, then anonymous proxying
# is enabled. The headers listed are allowed through, while all others
# are denied. If no Anonymous keyword is present, then all headers are
# passed through.
#
# You MUST include quotes around the headers.
#
# Most sites require cookies to work correctly, so you will need to
# allow Cookies through if you access those sites.
#
# Example:
#Anonymous "Host"
#Anonymous "Authorization"
#Anonymous "Cookie"

#
# ConnectPort: This is a list of ports allowed by tinyproxy-rust when the
# CONNECT method is used. To disable the CONNECT method altogether, set
# the value to 0. If no ConnectPort line is found, all ports are
# allowed (which is not very secure.)
#
# The following two ports are used by SSL.
#
ConnectPort 443
ConnectPort 563

#
# Configure one or more ReversePath directives to enable reverse proxy
# support. With reverse proxying it's possible to make a number of
# sites appear as if they were part of a single site.
#
# If you uncomment the following two directives and run tinyproxy-rust
# on your own computer at port 8888, you can access Google using
# http://localhost:8888/google/ and Wired News using
# http://localhost:8888/wired/
#
#ReversePath "/google/" "http://www.google.com/"
#ReversePath "/wired/" "http://www.wired.com/"

#
# When using tinyproxy-rust with reverse path support, it is useful to be
# able to forward requests to another server. To do this, uncomment the
# following directives.
#
#ReverseOnly Yes
#ReverseMagic Yes
#ReverseBaseURL "http://localhost:8888/"

#
# Use an upstream proxy server rather than connecting directly to servers.
# The format is upstream type:host:port [username:password] [domain]
# Examples:
#Upstream http:proxy.example.com:8080
#Upstream socks5:127.0.0.1:1080

#
# Configure the upstream proxy to use HTTP authentication.
# This is a shortcut to avoid re-encoding the username and password
# in the upstream directive.
#
#UpstreamAuth username:password

#
# StatHost: This configures the host name or IP address that is treated
# as the stat host: Whenever a request for this host is received,
# tinyproxy-rust will return an HTML page with statistics information
# rather than forwarding the request.
#
#StatHost "tinyproxy.stats"

#
# StatFile: The HTML file that gets returned when the StatHost is requested.
# If this directive is not set, a default page is hardcoded in tinyproxy-rust.
#
#StatFile "/usr/share/tinyproxy-rust/stats.html"

#
# ErrorFile: Defines the HTML file to send when a given HTTP error
# occurs. You will probably need to customize the location to your
# particular install. The usual locations to check are:
#   /usr/local/share/tinyproxy-rust
#   /usr/share/tinyproxy-rust
#   /etc/tinyproxy-rust
#
#ErrorFile 404 "/usr/share/tinyproxy-rust/404.html"
#ErrorFile 400 "/usr/share/tinyproxy-rust/400.html"
#ErrorFile 503 "/usr/share/tinyproxy-rust/503.html"
#ErrorFile 403 "/usr/share/tinyproxy-rust/403.html"
#ErrorFile 408 "/usr/share/tinyproxy-rust/408.html"

#
# DefaultErrorFile: The HTML file that gets sent if there is no
# HTML file defined with an ErrorFile keyword for the HTTP error
# that has occurred.
#
DefaultErrorFile "/usr/share/tinyproxy-rust/default.html"

#
# XTinyproxy: Tell Tinyproxy-rust to include the X-Tinyproxy header, which
# contains the client's IP address.
#
#XTinyproxy Yes